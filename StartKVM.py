from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
import sys
import os
import time
import xml.etree.ElementTree as ET
import shutil
from subprocess import Popen

class RemoteAccessCard:

    browser = []
    ip = ''
    user = ''
    password = ''
    filename = ''

    # These values are the one which are generated by the RemoteAccess Card
    tmp_user = ''
    tmp_pwd = ''

    wait_browser = []
    website_available = False

    def __init__(self, ip, user, password):
        self.ip = ip
        self.user = user
        self.password = password

    def enable_download_headless(self, download_dir):
        self.browser.command_executor._commands["send_command"] = ("POST", '/session/$sessionId/chromium/send_command')
        params = {'cmd': 'Page.setDownloadBehavior', 'params': {'behavior': 'allow', 'downloadPath': download_dir}}
        self.browser.execute("send_command", params)

    def connect(self):
        # Open website in chrome driver browser
        print('Connecting to Remote Access Card...')
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        self.browser = webdriver.Chrome(options=chrome_options)
        status = self.browser.get('http://' + self.ip)
        self.wait_browser = WebDriverWait(self.browser, 10)

        # Login with given username and password
        try:
            username = self.browser.find_element_by_id('user')
            username.send_keys(self.user)
        except:
            raise Exception("Remote Access Website unavailable. Please Check the IP / URL.")

        website_available = True
        pwd = self.browser.find_element_by_id('password')
        pwd.send_keys(self.password)

        self.browser.execute_script('javascript:frmSubmit()')
        self.wait_browser.until(EC.frame_to_be_available_and_switch_to_it((By.NAME, 'globalnav')))
        self.browser.switch_to.default_content()
        print('Login successfull...')


    def download(self):
        print('Downloading jnlp file...')
        # Now we are logged in, navigate to the viewer.jnlp and download it
        self.wait_browser.until(EC.frame_to_be_available_and_switch_to_it((By.NAME, 'bmcTree')))
        self.browser.execute_script("javascript:nodeClick('vkvm.html')")
        #Start the download
        self.enable_download_headless(os.getcwd())
        self.browser.switch_to.default_content()
        self.wait_browser.until(EC.frame_to_be_available_and_switch_to_it((By.NAME, 'dataPage')))
        #self.browser.switch_to.frame("dataPage")
        self.wait_browser.until(EC.presence_of_element_located((By.ID, 'btnLaunchKVM')))
        self.browser.execute_script("javascript:launchKVM()")
        
        # Poll for the latest file, until a file, called viewer.jnlp* appears
        self.filename = max([f for f in os.listdir(os.getcwd())], key=os.path.getctime)
        cnt = 0
        while('viewer.jnlp' not in self.filename) or cnt > 5:
            self.filename = max([f for f in os.listdir(os.getcwd())], key=os.path.getctime)
            time.sleep(1)
            cnt = cnt + 1
        
        if cnt > 5:
            raise Exception("Downloading viewer.jnlp file failed.")

    def get_data_from_jnlp(self):
        tree = ET.parse(self.filename)
        root = tree.getroot()
        app = root.find('application-desc')
        arg_list = app.findall('argument')

        for arg in arg_list:
            if 'user' in arg.text:
                self.tmp_user = arg.text.split('=')[1]
            if 'passwd' in arg.text:
                self.tmp_pwd = arg.text.split('=')[1]

        os.remove(self.filename)

    def logout(self):
        self.browser.switch_to.default_content()
        self.browser.execute_script("javascript:f_logout()")

    def start_kvm(self):
        print('Starting KVM...')
        exec_str = '.\jre\\bin\java -cp avctKVM.jar -Djava.library.path=.\lib com.avocent.kvm.client.Main ip=%drachost% kmport=2068 vport=2068 user=%dracuser% passwd=%dracpwd% apcp=1 version=2 platform=ast2050 vmprivilege=true'
        exec_str = exec_str.replace('%drachost%', self.ip)
        exec_str = exec_str.replace('%dracuser%', self.tmp_user)
        exec_str = exec_str.replace('%dracpwd%', self.tmp_pwd)

        os.system(exec_str)

if __name__ == "__main__":
    user = ''
    password = ''
    ip = '192.168.178.3'
    
    r = RemoteAccessCard(ip, user, password)
    try:
        r.connect()
        r.download()
        r.get_data_from_jnlp()
        r.start_kvm()
        time.sleep(5)
        r.logout()
    except Exception as e:
        print(e)
        print("Starting KVM failed.")
        # Only logout if the website got loaded
        if r.website_available is True:
            r.logout()
